#热部署生效
spring.devtools.restart.enabled=true
#设置重启的目录
#spring.devtools.restart.additional-paths: src/main/java
#classpath目录下的WEB-INF文件夹内容修改不重启
spring.devtools.restart.exclude=static/**
server.port=8888

#database：tmall
spring.datasource.url=jdbc:mysql://localhost:3306/tmall_springboot?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false&allowPublicKeyRetrieval=true&zeroDateTimeBehavior=convert_To_Null
spring.datasource.username=root
spring.datasource.password=xu
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# 表结构自动生成策略
spring.jpa.properties.hibernate.hbm2ddl.auto=update

#thymeleaf
#经典html5模式，即允许非严格的html出现，元素少点什么也可以编译通过
spring.thymeleaf.mode=LEGACYHTML5
spring.thymeleaf.encoding=UTF-8
# spring.thymeleaf.content-type=text/html过时
spring.thymeleaf.servlet.content-type=text/html
# 表示不要缓存，以免在开发过程中因为停留在缓存而给开发人员带来困扰
spring.thymeleaf.cache=false

# http://127.0.0.1:8080/tmall_springboot/，其中adminserver.context-path
server.servlet.context-path=/tmall_springboot

# 设置上传文件大小，默认只有1 m,过时
#spring.http.multipart.maxFileSize=100Mb
#spring.http.multipart.maxRequestSize=100Mb

# jpa对实体类的默认字段会把驼峰命名的属性，转换为字段名的时候自动加上下划线。 这个配置的作用就是去掉下划线
# 比如属性名称是 createDate, jpa 默认转换为字段名 create_Date。 有了这个配置之后，就会转换为同名字段 createDate
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
# 显示 hibernate 执行的sql语句
spring.jpa.show-sql=false
# 允许JPA / Hibernate为您自动创建数据库和表模式。
spring.jpa.hibernate.ddl-auto=create



# activeMQ
spring.activemq.broker-url=tcp://localhost:61616
spring.activemq.user=xu
spring.activemq.password=xu
spring.activemq.pool.enabled=false

# Redis服务器地址
spring.redis.host=localhost

# Redis服务器连接端口
spring.redis.port=6379
# 集群
# spring.redis.cluster.nodes = 192.168.149.14:7000,192.168.149.14:7001,192.168.149.14:7002,192.168.149.14:7003,192.168.149.14:7004,192.168.149.14:7005
# spring.redis.password=xu #如果redis服务器那里没有设置密码，这里写了的话就是多余的，会报错，除非在redis.conf配置文件requirepass处写密码。

## 日志，路径+名字。目前日志只加了配置。没有加类。将自动加载到这里面。如果不想这样，可以考虑加@Slf4j，引用自lombok.extern.slf4j.Slf4j;然后将为被注解的类生成一个log对象
logging.file=./log/tmall_springboot.log